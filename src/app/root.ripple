import { Client } from "archipelago.js"
import { untrack, track } from "ripple"
import { trackStored } from "../lib/helpers.ripple"
import { Button, InputField, SelectField } from "./ui.ripple"
import { archipelagoEffect, type ServerDetails, type PlayerDetails } from "../lib/archipelago.ripple"
import { Tracker } from "./tracker.ripple"

export component Root() {
	const server = track<ServerDetails>()
	const player = track<PlayerDetails>()

	<div class="h-dvh flex flex-col min-h-0 overflow-clip">
		<header class="bg-gray-800 p-4 md:hidden">
			<p>{"mobile header"}</p>
		</header>

		<div class="flex flex-col flex-1 h-full md:flex-row">
			<nav class="hidden md:flex flex-col p-4 w-64 bg-gray-800">
				<p>{"desktop sidebar"}</p>
			</nav>

			<main class="flex-1">
				if (@server == null) {
					<ServerForm onSubmit={(submission) => @server = submission} />
				} else if (@player == null) {
					<PlayerForm
						{@server}
						onSubmit={(submission) => @player = submission}
					/>
				} else {
					<Tracker {@server} {@player} />
				}
			</main>
		</div>
	</div>
}

component ServerForm(props: {
	onSubmit: (inputs: ServerDetails) => void;
}) {
	const address = trackStored({ key: "ServerForm:address" })
	const password = trackStored({ key: `ServerForm:password` })

	<div class="h-full grid place-items-center content-center p-4">
		<h1
			class="text-3xl font-light text-center text-pretty text-gray-400 my-6"
		>
			{"Connect to Server"}
		</h1>

		<form
			class="max-w-sm w-full grid gap-3"
			onSubmit={(event: SubmitEvent) => {
				event.preventDefault()
				props.onSubmit({ address: @address, password: @password })
			}}
		>
			<InputField
				label="Address"
				placeholder="archipelago.gg:42069"
				required
				value={@address}
				onInput={(event) => {
					@address = (event.currentTarget as HTMLInputElement).value
				}}
			/>
			<InputField
				label="Password"
				placeholder="••••••••"
				value={@password}
				onInput={(event) => {
					@password = (event.currentTarget as HTMLInputElement).value
				}}
			/>
			<Button type="submit">{"Connect"}</Button>
		</form>
	</div>
}

component PlayerForm(props: {
	server: ServerDetails;
	onSubmit: (inputs: PlayerDetails) => void;
}) {
	const games = track<string[]>()

	archipelagoEffect(
		{
			server: track(() => props.server),
			setup: (client) => {
				client.socket.on("receivedPacket", (event) => {
					console.debug("Received packet:", event)
				})
				client.socket.on("roomInfo", (event) => {
					untrack(() => {
						// you can't connect as the Archipelago game
						@games = event.games.filter((g) => g !== "Archipelago").sort()
					})
				})
			},
		},
	)

	<div class="h-full grid place-items-center content-center p-4">
		if (@games == null) {
			<p>{"Connecting..."}</p>
		} else if (!@games[0]) {
			<p>{"Error: No games found"}</p>
		} else {
			const game = trackStored({ key: `lastGame`, fallback: @games[0] })
			const name = trackStored({ key: `lastPlayerName:${game}` })

			<h1
				class="text-3xl font-light text-center text-pretty text-gray-400 my-6"
			>
				{"Enter Slot Details"}
			</h1>

			<form
				class="max-w-sm w-full grid gap-3"
				onSubmit={(event: SubmitEvent) => {
					event.preventDefault()
					props.onSubmit({ game: @game, name: @name })
				}}
			>
				<SelectField
					label="Game"
					options={@games}
					value={@game}
					onInput={(event) => {
						@game = (event.currentTarget as HTMLInputElement).value
					}}
				/>
				<InputField
					label="Name"
					placeholder="IJustLostTheGame"
					required
					value={@name}
					onInput={(event) => {
						@name = (event.currentTarget as HTMLInputElement).value
					}}
				/>
				<Button type="submit">{"Enter"}</Button>
			</form>
		}
	</div>
}
